generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  name      String
  email     String    @unique
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  invoices  Invoice[]
  tasks     Task[]    @relation("UserTasks")
  interviews  Interview[]
  interviewAssignments InterviewerOnInterview[]
 
}

model Invoice {
  id        String   @id @default(cuid())
  name      String
  company   String
  amount    Float
  date      DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id],onDelete: Cascade)
  userId    String
  items     Item[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Item {
  id          String  @id @default(cuid())
  description String
  price       Float
  invoice     Invoice @relation(fields: [invoiceId], references: [id],onDelete: Cascade)
  invoiceId   String
}

model Project {
  id          String   @id @default(cuid())
  name        String
  deadline    DateTime
  teamMembers String
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tasks Task[]
}

model Task {
  id          String   @id @default(cuid())
  name        String
  description String
  difficulty  String
  status      String   @default("todo")
  deadline    DateTime
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  userId String?
  user   User?   @relation("UserTasks", fields: [userId], references: [id], onDelete: SetNull)

  timeSpent Int @default(0) // total time spent in seconds
}
model Blog {
  id          String   @id @default(cuid())
  title       String
  description String
  author      String
  images      String[] // array of image URLs
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
model CV {
  id          String   @id @default(cuid())
  name        String
  email       String
  phone       String
  about       String
  pdfUrl      String
  selected    Boolean  @default(false)
  interviewTime DateTime?
  createdAt   DateTime @default(now())
  interviews  Interview[]
}
model Interview {
  id            String   @id @default(cuid())
  cvId          String
  cv            CV       @relation(fields: [cvId], references: [id], onDelete: Cascade)
  
  title         String
  dateTime      DateTime
  interviewerId String
  interviewer   User     @relation(fields: [interviewerId], references: [id], onDelete: SetNull)
  
  meetingLink   String?  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  interviewers InterviewerOnInterview[]
}

model InterviewerOnInterview {
  id          String    @id @default(cuid())
  interviewId String
  interview   Interview @relation(fields: [interviewId], references: [id], onDelete: Cascade)
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)


  @@unique([interviewId, userId])
}



